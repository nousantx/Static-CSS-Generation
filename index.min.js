#!/usr/bin/env node
const fs=require("fs");const path=require("path");const{parse:parse}=require("node-html-parser");const glob=require("glob");const{Command:Command}=require("commander");const chokidar=require("chokidar");class GenerateCSS{constructor(e){this.validateConfig(e);this.config=e;this.generatedCSS=new Set}validateConfig(e){const t=["input","output","property"];t.forEach((t=>{if(!e[t]){throw new Error(`Missing required configuration field: ${t}`)}}))}static toCamelCase(e){return e.replace(/-([a-z])/g,(e=>e[1].toUpperCase()))}static toKebabCase(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}static escapeCSSSelector(e){return e.replace(/([ #.;?%&,@+*~'"!^$[\]()=>|])/g,"\\$1")}matchClass(e){const t=/(?:([a-zA-Z0-9-]+):)?(-?[a-zA-Z0-9_]+(?:-[a-zA-Z0-9_]+)*|\[--[a-zA-Z0-9_-]+\])-(-?(?:\d+(\.\d+)?)|(?:[a-zA-Z0-9_]+(?:-[a-zA-Z0-9_]+)*(?:-[a-zA-Z0-9_]+)*)|(?:#[0-9a-fA-F]+)|(?:\[[^\]]+\])|(?:\$[^\s]+))([a-zA-Z%]*)/;return e.match(t)?.slice(1)||null}parseFile(e){try{const t=fs.readFileSync(e,"utf-8");const r=path.extname(e);const s={".html":this.parseHTML,".jsx":this.parseJSX,".tsx":this.parseJSX,".mdx":this.parseMDX};const n=s[r];if(n){return n.call(this,t)}else{console.warn(`Unsupported file type: ${r}`);return[]}}catch(t){console.error(`Error reading file ${e}:`,t);return[]}}parseHTML(e){const t=parse(e);return this.extractClassNames(t)}parseJSX(e){const t=/className\s*=\s*{?["'`]([^"'`]+)["'`]?}?/g;const r=new Set;let s;while((s=t.exec(e))!==null){s[1].split(/\s+/).forEach((e=>r.add(e)))}return Array.from(r)}parseMDX(e){return[...new Set([...this.parseHTML(e),...this.parseJSX(e)])]}extractClassNames(e){return Array.from(new Set(e.querySelectorAll("*").flatMap((e=>e.getAttribute("class")?.split(/\s+/)||[]))))}parseClass(e){const[t,r]=e.split(":");const s=r||t;const n=r?t:undefined;const a=this.processCustomClass(n,s);if(a){this.generatedCSS.add(a);return a}const o=this.matchClass(e);if(!o)return null;const[i,c,l,,u]=o;const p=this.config.property[c];const h=this.processFinalValue(l,u);const S=this.generateCSSRuleFromProperties(c,l+u,p,h,i);if(S){this.generatedCSS.add(S)}return S}processFinalValue(e,t){const r=this.config.values[e];if(r)return r;if(e.startsWith("$")){return`var(--${e.slice(1)})`}if(e.startsWith("[")&&e.endsWith("]")){const t=e.slice(1,-1).replace(/\\_/g," ");return t.startsWith("--")?`var(${t})`:t}return e+(t||"")}generateCSSRuleFromProperties(e,t,r,s,n){console.log(t,s);if(Array.isArray(r)){const a=r.map((e=>`${GenerateCSS.toKebabCase(e)}: ${s}`)).join("; ");return this.generateCSSRule(`${e}-${t}`,a,null,n)}if(typeof r==="object"&&r!==null){if(r.property&&r.value){const a=r.value.replace(/{value}/g,s);if(Array.isArray(r.property)){const s=r.property.map((e=>`${GenerateCSS.toKebabCase(e)}: ${a}`)).join("; ");return this.generateCSSRule(`${e}-${t}`,s,null,n)}return this.generateCSSRule(`${e}-${t}`,GenerateCSS.toKebabCase(r.property),a,n)}return this.generateCSSRule(`${e}-${t}`,r,s,n)}if(e.startsWith("[--")&&e.endsWith("]")){const r=e.slice(1,-1).replace(/\\_/g," ");return this.generateCSSRule(`[${r}]-${t}`,r,s,n)}if(typeof r==="string"){return this.generateCSSRule(`${e}-${t}`,GenerateCSS.toKebabCase(r),s,n)}return null}processCustomClass(e,t){const r=Object.entries(this.config.classes).filter((([,e])=>e.hasOwnProperty(t))).reduce(((e,[r,s])=>{e[GenerateCSS.toKebabCase(r)]=s[t];return e}),{});if(Object.keys(r).length>0){const s=Object.entries(r).map((([e,t])=>`${e}: ${t}`)).join("; ");return this.generateCSSRule(t,s,null,e)}return null}generateCSSRule(e,t,r,s){const n=r?`${t}: ${r}`:t;const a=GenerateCSS.escapeCSSSelector(e);return s?`.${s}\\:${a}:${s} { ${n}; }`:`.${a} { ${n}; }`}create(e){(Array.isArray(e)?e:e.split(/\s+/)).forEach((e=>this.parseClass(e)));return Array.from(this.generatedCSS).join("\n")}generateFromFiles(){const e=new Set;if(this.config.input){this.config.input.forEach((t=>{glob.sync(t).forEach((t=>{this.parseFile(t).forEach((t=>e.add(t)))}))}));const t=this.create(Array.from(e));try{fs.writeFileSync(this.config.output,t);console.log(`CSS file generated at: ${this.config.output}`)}catch(e){console.error(`Error writing CSS file ${this.config.output}:`,e)}return t}}}function main(){const e=new Command;e.version("1.0.0").description("Generate CSS from class names in your project files.").option("-w, --watch","Watch mode to regenerate CSS on file changes").option("-c, --config <path>","Path to the configuration file","tenoxui.config.js").parse(process.argv);const t=e.opts();const r=path.resolve(process.cwd(),t.config);if(!fs.existsSync(r)){console.error(`Configuration file (${r}) not found.`);process.exit(1)}const s=require(r);const n=new GenerateCSS(s);n.generateFromFiles();if(t.watch){const e=chokidar.watch(s.input,{ignoreInitial:true});e.on("all",(()=>n.generateFromFiles()))}}if(require.main===module){main()}module.exports=GenerateCSS;